[
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? extends の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 1
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? super の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 2
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? extends の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 3
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? super の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 4
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? extends の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 5
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? super の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 6
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? extends の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 7
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? super の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 8
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? extends の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 9
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? super の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 10
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? extends の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 11
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? super の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 12
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? extends の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 13
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? super の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 14
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? extends の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 15
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? super の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 16
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? extends の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 17
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? super の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 18
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? extends の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 19
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? super の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 20
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? extends の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 21
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? super の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 22
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? extends の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 23
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? super の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 24
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? extends の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 25
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? super の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 26
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? extends の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 27
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? super の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 28
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? extends の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 29
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? super の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 30
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? extends の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 31
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? super の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 32
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? extends の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 33
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? super の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 34
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? extends の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 35
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? super の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 36
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? extends の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 37
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? super の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 38
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? extends の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 39
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? super の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 40
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? extends の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 41
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? super の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 42
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? extends の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 43
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? super の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 44
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? extends の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 45
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? super の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 46
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? extends の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 47
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? super の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 48
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? extends の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 49
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? super の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 50
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? extends の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 51
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? super の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 52
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? extends の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 53
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? super の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 54
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? extends の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 55
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? super の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 56
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? extends の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 57
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? super の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 58
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? extends の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 59
  },
  {
    "category": "Java Gold/ジェネリクス/ワイルドカード",
    "difficulty": "上級",
    "question": "? super の性質として正しいものはどれ？",
    "code": "// 概念問題：PECS（Producer Extends, Consumer Super）",
    "choices": [
      "extendsは読取中心、superは書込中心",
      "両者とも書込不可",
      "両者とも読取のみ",
      "superは読取中心、extendsは書込中心",
      "どちらも意味は同じ"
    ],
    "answerIndex": 0,
    "explanation": "PECS原則。? extendsはProducer（get）、? superはConsumer（add）。",
    "id": 60
  },
  {
    "category": "Java Gold/Stream API/短絡",
    "difficulty": "中級",
    "question": "anyMatch の短絡特性に関する正しい説明はどれ？",
    "code": "import java.util.stream.*;\npublic class Main {\n    public static void main(String[] args) {\n        boolean ok = IntStream.range(0, 100)\n            .peek(i -> { if (i == 5) throw new RuntimeException(); })\n            .anyMatch(i -> i > 50);\n        System.out.println(ok);\n    }\n}",
    "choices": [
      "条件成立後は以降の要素を処理しない",
      "全要素を必ず処理する",
      "peekは評価されない",
      "例外は無視される",
      "コンパイルエラーになる"
    ],
    "answerIndex": 0,
    "explanation": "anyMatchは短絡するため、成立後は以降の要素評価を行わない。",
    "id": 61
  },
  {
    "category": "Java Gold/Stream API/短絡",
    "difficulty": "中級",
    "question": "anyMatch の短絡特性に関する正しい説明はどれ？",
    "code": "import java.util.stream.*;\npublic class Main {\n    public static void main(String[] args) {\n        boolean ok = IntStream.range(0, 100)\n            .peek(i -> { if (i == 10) throw new RuntimeException(); })\n            .anyMatch(i -> i > 50);\n        System.out.println(ok);\n    }\n}",
    "choices": [
      "条件成立後は以降の要素を処理しない",
      "全要素を必ず処理する",
      "peekは評価されない",
      "例外は無視される",
      "コンパイルエラーになる"
    ],
    "answerIndex": 0,
    "explanation": "anyMatchは短絡するため、成立後は以降の要素評価を行わない。",
    "id": 62
  },
  {
    "category": "Java Gold/Stream API/短絡",
    "difficulty": "中級",
    "question": "anyMatch の短絡特性に関する正しい説明はどれ？",
    "code": "import java.util.stream.*;\npublic class Main {\n    public static void main(String[] args) {\n        boolean ok = IntStream.range(0, 100)\n            .peek(i -> { if (i == 20) throw new RuntimeException(); })\n            .anyMatch(i -> i > 50);\n        System.out.println(ok);\n    }\n}",
    "choices": [
      "条件成立後は以降の要素を処理しない",
      "全要素を必ず処理する",
      "peekは評価されない",
      "例外は無視される",
      "コンパイルエラーになる"
    ],
    "answerIndex": 0,
    "explanation": "anyMatchは短絡するため、成立後は以降の要素評価を行わない。",
    "id": 63
  },
  {
    "category": "Java Gold/Stream API/短絡",
    "difficulty": "中級",
    "question": "anyMatch の短絡特性に関する正しい説明はどれ？",
    "code": "import java.util.stream.*;\npublic class Main {\n    public static void main(String[] args) {\n        boolean ok = IntStream.range(0, 100)\n            .peek(i -> { if (i == 30) throw new RuntimeException(); })\n            .anyMatch(i -> i > 50);\n        System.out.println(ok);\n    }\n}",
    "choices": [
      "条件成立後は以降の要素を処理しない",
      "全要素を必ず処理する",
      "peekは評価されない",
      "例外は無視される",
      "コンパイルエラーになる"
    ],
    "answerIndex": 0,
    "explanation": "anyMatchは短絡するため、成立後は以降の要素評価を行わない。",
    "id": 64
  },
  {
    "category": "Java Gold/Stream API/短絡",
    "difficulty": "中級",
    "question": "anyMatch の短絡特性に関する正しい説明はどれ？",
    "code": "import java.util.stream.*;\npublic class Main {\n    public static void main(String[] args) {\n        boolean ok = IntStream.range(0, 100)\n            .peek(i -> { if (i == 40) throw new RuntimeException(); })\n            .anyMatch(i -> i > 50);\n        System.out.println(ok);\n    }\n}",
    "choices": [
      "条件成立後は以降の要素を処理しない",
      "全要素を必ず処理する",
      "peekは評価されない",
      "例外は無視される",
      "コンパイルエラーになる"
    ],
    "answerIndex": 0,
    "explanation": "anyMatchは短絡するため、成立後は以降の要素評価を行わない。",
    "id": 65
  },
  {
    "category": "Java Gold/Stream API/短絡",
    "difficulty": "中級",
    "question": "anyMatch の短絡特性に関する正しい説明はどれ？",
    "code": "import java.util.stream.*;\npublic class Main {\n    public static void main(String[] args) {\n        boolean ok = IntStream.range(0, 100)\n            .peek(i -> { if (i == 50) throw new RuntimeException(); })\n            .anyMatch(i -> i > 50);\n        System.out.println(ok);\n    }\n}",
    "choices": [
      "条件成立後は以降の要素を処理しない",
      "全要素を必ず処理する",
      "peekは評価されない",
      "例外は無視される",
      "コンパイルエラーになる"
    ],
    "answerIndex": 0,
    "explanation": "anyMatchは短絡するため、成立後は以降の要素評価を行わない。",
    "id": 66
  },
  {
    "category": "Java Gold/Stream API/短絡",
    "difficulty": "中級",
    "question": "anyMatch の短絡特性に関する正しい説明はどれ？",
    "code": "import java.util.stream.*;\npublic class Main {\n    public static void main(String[] args) {\n        boolean ok = IntStream.range(0, 100)\n            .peek(i -> { if (i == 60) throw new RuntimeException(); })\n            .anyMatch(i -> i > 50);\n        System.out.println(ok);\n    }\n}",
    "choices": [
      "条件成立後は以降の要素を処理しない",
      "全要素を必ず処理する",
      "peekは評価されない",
      "例外は無視される",
      "コンパイルエラーになる"
    ],
    "answerIndex": 0,
    "explanation": "anyMatchは短絡するため、成立後は以降の要素評価を行わない。",
    "id": 67
  },
  {
    "category": "Java Gold/Stream API/短絡",
    "difficulty": "中級",
    "question": "anyMatch の短絡特性に関する正しい説明はどれ？",
    "code": "import java.util.stream.*;\npublic class Main {\n    public static void main(String[] args) {\n        boolean ok = IntStream.range(0, 100)\n            .peek(i -> { if (i == 70) throw new RuntimeException(); })\n            .anyMatch(i -> i > 50);\n        System.out.println(ok);\n    }\n}",
    "choices": [
      "条件成立後は以降の要素を処理しない",
      "全要素を必ず処理する",
      "peekは評価されない",
      "例外は無視される",
      "コンパイルエラーになる"
    ],
    "answerIndex": 0,
    "explanation": "anyMatchは短絡するため、成立後は以降の要素評価を行わない。",
    "id": 68
  },
  {
    "category": "Java Gold/Stream API/短絡",
    "difficulty": "中級",
    "question": "anyMatch の短絡特性に関する正しい説明はどれ？",
    "code": "import java.util.stream.*;\npublic class Main {\n    public static void main(String[] args) {\n        boolean ok = IntStream.range(0, 100)\n            .peek(i -> { if (i == 80) throw new RuntimeException(); })\n            .anyMatch(i -> i > 50);\n        System.out.println(ok);\n    }\n}",
    "choices": [
      "条件成立後は以降の要素を処理しない",
      "全要素を必ず処理する",
      "peekは評価されない",
      "例外は無視される",
      "コンパイルエラーになる"
    ],
    "answerIndex": 0,
    "explanation": "anyMatchは短絡するため、成立後は以降の要素評価を行わない。",
    "id": 69
  },
  {
    "category": "Java Gold/Stream API/短絡",
    "difficulty": "中級",
    "question": "anyMatch の短絡特性に関する正しい説明はどれ？",
    "code": "import java.util.stream.*;\npublic class Main {\n    public static void main(String[] args) {\n        boolean ok = IntStream.range(0, 100)\n            .peek(i -> { if (i == 90) throw new RuntimeException(); })\n            .anyMatch(i -> i > 50);\n        System.out.println(ok);\n    }\n}",
    "choices": [
      "条件成立後は以降の要素を処理しない",
      "全要素を必ず処理する",
      "peekは評価されない",
      "例外は無視される",
      "コンパイルエラーになる"
    ],
    "answerIndex": 0,
    "explanation": "anyMatchは短絡するため、成立後は以降の要素評価を行わない。",
    "id": 70
  },
  {
    "category": "Java Gold/Stream API/短絡",
    "difficulty": "中級",
    "question": "anyMatch の短絡特性に関する正しい説明はどれ？",
    "code": "import java.util.stream.*;\npublic class Main {\n    public static void main(String[] args) {\n        boolean ok = IntStream.range(0, 100)\n            .peek(i -> { if (i == 5) throw new RuntimeException(); })\n            .anyMatch(i -> i > 50);\n        System.out.println(ok);\n    }\n}",
    "choices": [
      "条件成立後は以降の要素を処理しない",
      "全要素を必ず処理する",
      "peekは評価されない",
      "例外は無視される",
      "コンパイルエラーになる"
    ],
    "answerIndex": 0,
    "explanation": "anyMatchは短絡するため、成立後は以降の要素評価を行わない。",
    "id": 71
  },
  {
    "category": "Java Gold/Stream API/短絡",
    "difficulty": "中級",
    "question": "anyMatch の短絡特性に関する正しい説明はどれ？",
    "code": "import java.util.stream.*;\npublic class Main {\n    public static void main(String[] args) {\n        boolean ok = IntStream.range(0, 100)\n            .peek(i -> { if (i == 10) throw new RuntimeException(); })\n            .anyMatch(i -> i > 50);\n        System.out.println(ok);\n    }\n}",
    "choices": [
      "条件成立後は以降の要素を処理しない",
      "全要素を必ず処理する",
      "peekは評価されない",
      "例外は無視される",
      "コンパイルエラーになる"
    ],
    "answerIndex": 0,
    "explanation": "anyMatchは短絡するため、成立後は以降の要素評価を行わない。",
    "id": 72
  },
  {
    "category": "Java Gold/Stream API/短絡",
    "difficulty": "中級",
    "question": "anyMatch の短絡特性に関する正しい説明はどれ？",
    "code": "import java.util.stream.*;\npublic class Main {\n    public static void main(String[] args) {\n        boolean ok = IntStream.range(0, 100)\n            .peek(i -> { if (i == 20) throw new RuntimeException(); })\n            .anyMatch(i -> i > 50);\n        System.out.println(ok);\n    }\n}",
    "choices": [
      "条件成立後は以降の要素を処理しない",
      "全要素を必ず処理する",
      "peekは評価されない",
      "例外は無視される",
      "コンパイルエラーになる"
    ],
    "answerIndex": 0,
    "explanation": "anyMatchは短絡するため、成立後は以降の要素評価を行わない。",
    "id": 73
  },
  {
    "category": "Java Gold/Stream API/短絡",
    "difficulty": "中級",
    "question": "anyMatch の短絡特性に関する正しい説明はどれ？",
    "code": "import java.util.stream.*;\npublic class Main {\n    public static void main(String[] args) {\n        boolean ok = IntStream.range(0, 100)\n            .peek(i -> { if (i == 30) throw new RuntimeException(); })\n            .anyMatch(i -> i > 50);\n        System.out.println(ok);\n    }\n}",
    "choices": [
      "条件成立後は以降の要素を処理しない",
      "全要素を必ず処理する",
      "peekは評価されない",
      "例外は無視される",
      "コンパイルエラーになる"
    ],
    "answerIndex": 0,
    "explanation": "anyMatchは短絡するため、成立後は以降の要素評価を行わない。",
    "id": 74
  },
  {
    "category": "Java Gold/Stream API/短絡",
    "difficulty": "中級",
    "question": "anyMatch の短絡特性に関する正しい説明はどれ？",
    "code": "import java.util.stream.*;\npublic class Main {\n    public static void main(String[] args) {\n        boolean ok = IntStream.range(0, 100)\n            .peek(i -> { if (i == 40) throw new RuntimeException(); })\n            .anyMatch(i -> i > 50);\n        System.out.println(ok);\n    }\n}",
    "choices": [
      "条件成立後は以降の要素を処理しない",
      "全要素を必ず処理する",
      "peekは評価されない",
      "例外は無視される",
      "コンパイルエラーになる"
    ],
    "answerIndex": 0,
    "explanation": "anyMatchは短絡するため、成立後は以降の要素評価を行わない。",
    "id": 75
  },
  {
    "category": "Java Gold/Stream API/短絡",
    "difficulty": "中級",
    "question": "anyMatch の短絡特性に関する正しい説明はどれ？",
    "code": "import java.util.stream.*;\npublic class Main {\n    public static void main(String[] args) {\n        boolean ok = IntStream.range(0, 100)\n            .peek(i -> { if (i == 50) throw new RuntimeException(); })\n            .anyMatch(i -> i > 50);\n        System.out.println(ok);\n    }\n}",
    "choices": [
      "条件成立後は以降の要素を処理しない",
      "全要素を必ず処理する",
      "peekは評価されない",
      "例外は無視される",
      "コンパイルエラーになる"
    ],
    "answerIndex": 0,
    "explanation": "anyMatchは短絡するため、成立後は以降の要素評価を行わない。",
    "id": 76
  },
  {
    "category": "Java Gold/Stream API/短絡",
    "difficulty": "中級",
    "question": "anyMatch の短絡特性に関する正しい説明はどれ？",
    "code": "import java.util.stream.*;\npublic class Main {\n    public static void main(String[] args) {\n        boolean ok = IntStream.range(0, 100)\n            .peek(i -> { if (i == 60) throw new RuntimeException(); })\n            .anyMatch(i -> i > 50);\n        System.out.println(ok);\n    }\n}",
    "choices": [
      "条件成立後は以降の要素を処理しない",
      "全要素を必ず処理する",
      "peekは評価されない",
      "例外は無視される",
      "コンパイルエラーになる"
    ],
    "answerIndex": 0,
    "explanation": "anyMatchは短絡するため、成立後は以降の要素評価を行わない。",
    "id": 77
  },
  {
    "category": "Java Gold/Stream API/短絡",
    "difficulty": "中級",
    "question": "anyMatch の短絡特性に関する正しい説明はどれ？",
    "code": "import java.util.stream.*;\npublic class Main {\n    public static void main(String[] args) {\n        boolean ok = IntStream.range(0, 100)\n            .peek(i -> { if (i == 70) throw new RuntimeException(); })\n            .anyMatch(i -> i > 50);\n        System.out.println(ok);\n    }\n}",
    "choices": [
      "条件成立後は以降の要素を処理しない",
      "全要素を必ず処理する",
      "peekは評価されない",
      "例外は無視される",
      "コンパイルエラーになる"
    ],
    "answerIndex": 0,
    "explanation": "anyMatchは短絡するため、成立後は以降の要素評価を行わない。",
    "id": 78
  },
  {
    "category": "Java Gold/Stream API/短絡",
    "difficulty": "中級",
    "question": "anyMatch の短絡特性に関する正しい説明はどれ？",
    "code": "import java.util.stream.*;\npublic class Main {\n    public static void main(String[] args) {\n        boolean ok = IntStream.range(0, 100)\n            .peek(i -> { if (i == 80) throw new RuntimeException(); })\n            .anyMatch(i -> i > 50);\n        System.out.println(ok);\n    }\n}",
    "choices": [
      "条件成立後は以降の要素を処理しない",
      "全要素を必ず処理する",
      "peekは評価されない",
      "例外は無視される",
      "コンパイルエラーになる"
    ],
    "answerIndex": 0,
    "explanation": "anyMatchは短絡するため、成立後は以降の要素評価を行わない。",
    "id": 79
  },
  {
    "category": "Java Gold/Stream API/短絡",
    "difficulty": "中級",
    "question": "anyMatch の短絡特性に関する正しい説明はどれ？",
    "code": "import java.util.stream.*;\npublic class Main {\n    public static void main(String[] args) {\n        boolean ok = IntStream.range(0, 100)\n            .peek(i -> { if (i == 90) throw new RuntimeException(); })\n            .anyMatch(i -> i > 50);\n        System.out.println(ok);\n    }\n}",
    "choices": [
      "条件成立後は以降の要素を処理しない",
      "全要素を必ず処理する",
      "peekは評価されない",
      "例外は無視される",
      "コンパイルエラーになる"
    ],
    "answerIndex": 0,
    "explanation": "anyMatchは短絡するため、成立後は以降の要素評価を行わない。",
    "id": 80
  },
  {
    "category": "Java Gold/Stream API/短絡",
    "difficulty": "中級",
    "question": "anyMatch の短絡特性に関する正しい説明はどれ？",
    "code": "import java.util.stream.*;\npublic class Main {\n    public static void main(String[] args) {\n        boolean ok = IntStream.range(0, 100)\n            .peek(i -> { if (i == 5) throw new RuntimeException(); })\n            .anyMatch(i -> i > 50);\n        System.out.println(ok);\n    }\n}",
    "choices": [
      "条件成立後は以降の要素を処理しない",
      "全要素を必ず処理する",
      "peekは評価されない",
      "例外は無視される",
      "コンパイルエラーになる"
    ],
    "answerIndex": 0,
    "explanation": "anyMatchは短絡するため、成立後は以降の要素評価を行わない。",
    "id": 81
  },
  {
    "category": "Java Gold/Stream API/短絡",
    "difficulty": "中級",
    "question": "anyMatch の短絡特性に関する正しい説明はどれ？",
    "code": "import java.util.stream.*;\npublic class Main {\n    public static void main(String[] args) {\n        boolean ok = IntStream.range(0, 100)\n            .peek(i -> { if (i == 10) throw new RuntimeException(); })\n            .anyMatch(i -> i > 50);\n        System.out.println(ok);\n    }\n}",
    "choices": [
      "条件成立後は以降の要素を処理しない",
      "全要素を必ず処理する",
      "peekは評価されない",
      "例外は無視される",
      "コンパイルエラーになる"
    ],
    "answerIndex": 0,
    "explanation": "anyMatchは短絡するため、成立後は以降の要素評価を行わない。",
    "id": 82
  },
  {
    "category": "Java Gold/Stream API/短絡",
    "difficulty": "中級",
    "question": "anyMatch の短絡特性に関する正しい説明はどれ？",
    "code": "import java.util.stream.*;\npublic class Main {\n    public static void main(String[] args) {\n        boolean ok = IntStream.range(0, 100)\n            .peek(i -> { if (i == 20) throw new RuntimeException(); })\n            .anyMatch(i -> i > 50);\n        System.out.println(ok);\n    }\n}",
    "choices": [
      "条件成立後は以降の要素を処理しない",
      "全要素を必ず処理する",
      "peekは評価されない",
      "例外は無視される",
      "コンパイルエラーになる"
    ],
    "answerIndex": 0,
    "explanation": "anyMatchは短絡するため、成立後は以降の要素評価を行わない。",
    "id": 83
  },
  {
    "category": "Java Gold/Stream API/短絡",
    "difficulty": "中級",
    "question": "anyMatch の短絡特性に関する正しい説明はどれ？",
    "code": "import java.util.stream.*;\npublic class Main {\n    public static void main(String[] args) {\n        boolean ok = IntStream.range(0, 100)\n            .peek(i -> { if (i == 30) throw new RuntimeException(); })\n            .anyMatch(i -> i > 50);\n        System.out.println(ok);\n    }\n}",
    "choices": [
      "条件成立後は以降の要素を処理しない",
      "全要素を必ず処理する",
      "peekは評価されない",
      "例外は無視される",
      "コンパイルエラーになる"
    ],
    "answerIndex": 0,
    "explanation": "anyMatchは短絡するため、成立後は以降の要素評価を行わない。",
    "id": 84
  },
  {
    "category": "Java Gold/Stream API/短絡",
    "difficulty": "中級",
    "question": "anyMatch の短絡特性に関する正しい説明はどれ？",
    "code": "import java.util.stream.*;\npublic class Main {\n    public static void main(String[] args) {\n        boolean ok = IntStream.range(0, 100)\n            .peek(i -> { if (i == 40) throw new RuntimeException(); })\n            .anyMatch(i -> i > 50);\n        System.out.println(ok);\n    }\n}",
    "choices": [
      "条件成立後は以降の要素を処理しない",
      "全要素を必ず処理する",
      "peekは評価されない",
      "例外は無視される",
      "コンパイルエラーになる"
    ],
    "answerIndex": 0,
    "explanation": "anyMatchは短絡するため、成立後は以降の要素評価を行わない。",
    "id": 85
  },
  {
    "category": "Java Gold/Stream API/短絡",
    "difficulty": "中級",
    "question": "anyMatch の短絡特性に関する正しい説明はどれ？",
    "code": "import java.util.stream.*;\npublic class Main {\n    public static void main(String[] args) {\n        boolean ok = IntStream.range(0, 100)\n            .peek(i -> { if (i == 50) throw new RuntimeException(); })\n            .anyMatch(i -> i > 50);\n        System.out.println(ok);\n    }\n}",
    "choices": [
      "条件成立後は以降の要素を処理しない",
      "全要素を必ず処理する",
      "peekは評価されない",
      "例外は無視される",
      "コンパイルエラーになる"
    ],
    "answerIndex": 0,
    "explanation": "anyMatchは短絡するため、成立後は以降の要素評価を行わない。",
    "id": 86
  },
  {
    "category": "Java Gold/Stream API/短絡",
    "difficulty": "中級",
    "question": "anyMatch の短絡特性に関する正しい説明はどれ？",
    "code": "import java.util.stream.*;\npublic class Main {\n    public static void main(String[] args) {\n        boolean ok = IntStream.range(0, 100)\n            .peek(i -> { if (i == 60) throw new RuntimeException(); })\n            .anyMatch(i -> i > 50);\n        System.out.println(ok);\n    }\n}",
    "choices": [
      "条件成立後は以降の要素を処理しない",
      "全要素を必ず処理する",
      "peekは評価されない",
      "例外は無視される",
      "コンパイルエラーになる"
    ],
    "answerIndex": 0,
    "explanation": "anyMatchは短絡するため、成立後は以降の要素評価を行わない。",
    "id": 87
  },
  {
    "category": "Java Gold/Stream API/短絡",
    "difficulty": "中級",
    "question": "anyMatch の短絡特性に関する正しい説明はどれ？",
    "code": "import java.util.stream.*;\npublic class Main {\n    public static void main(String[] args) {\n        boolean ok = IntStream.range(0, 100)\n            .peek(i -> { if (i == 70) throw new RuntimeException(); })\n            .anyMatch(i -> i > 50);\n        System.out.println(ok);\n    }\n}",
    "choices": [
      "条件成立後は以降の要素を処理しない",
      "全要素を必ず処理する",
      "peekは評価されない",
      "例外は無視される",
      "コンパイルエラーになる"
    ],
    "answerIndex": 0,
    "explanation": "anyMatchは短絡するため、成立後は以降の要素評価を行わない。",
    "id": 88
  },
  {
    "category": "Java Gold/Stream API/短絡",
    "difficulty": "中級",
    "question": "anyMatch の短絡特性に関する正しい説明はどれ？",
    "code": "import java.util.stream.*;\npublic class Main {\n    public static void main(String[] args) {\n        boolean ok = IntStream.range(0, 100)\n            .peek(i -> { if (i == 80) throw new RuntimeException(); })\n            .anyMatch(i -> i > 50);\n        System.out.println(ok);\n    }\n}",
    "choices": [
      "条件成立後は以降の要素を処理しない",
      "全要素を必ず処理する",
      "peekは評価されない",
      "例外は無視される",
      "コンパイルエラーになる"
    ],
    "answerIndex": 0,
    "explanation": "anyMatchは短絡するため、成立後は以降の要素評価を行わない。",
    "id": 89
  },
  {
    "category": "Java Gold/Stream API/短絡",
    "difficulty": "中級",
    "question": "anyMatch の短絡特性に関する正しい説明はどれ？",
    "code": "import java.util.stream.*;\npublic class Main {\n    public static void main(String[] args) {\n        boolean ok = IntStream.range(0, 100)\n            .peek(i -> { if (i == 90) throw new RuntimeException(); })\n            .anyMatch(i -> i > 50);\n        System.out.println(ok);\n    }\n}",
    "choices": [
      "条件成立後は以降の要素を処理しない",
      "全要素を必ず処理する",
      "peekは評価されない",
      "例外は無視される",
      "コンパイルエラーになる"
    ],
    "answerIndex": 0,
    "explanation": "anyMatchは短絡するため、成立後は以降の要素評価を行わない。",
    "id": 90
  },
  {
    "category": "Java Gold/Stream API/短絡",
    "difficulty": "中級",
    "question": "anyMatch の短絡特性に関する正しい説明はどれ？",
    "code": "import java.util.stream.*;\npublic class Main {\n    public static void main(String[] args) {\n        boolean ok = IntStream.range(0, 100)\n            .peek(i -> { if (i == 5) throw new RuntimeException(); })\n            .anyMatch(i -> i > 50);\n        System.out.println(ok);\n    }\n}",
    "choices": [
      "条件成立後は以降の要素を処理しない",
      "全要素を必ず処理する",
      "peekは評価されない",
      "例外は無視される",
      "コンパイルエラーになる"
    ],
    "answerIndex": 0,
    "explanation": "anyMatchは短絡するため、成立後は以降の要素評価を行わない。",
    "id": 91
  },
  {
    "category": "Java Gold/Stream API/短絡",
    "difficulty": "中級",
    "question": "anyMatch の短絡特性に関する正しい説明はどれ？",
    "code": "import java.util.stream.*;\npublic class Main {\n    public static void main(String[] args) {\n        boolean ok = IntStream.range(0, 100)\n            .peek(i -> { if (i == 10) throw new RuntimeException(); })\n            .anyMatch(i -> i > 50);\n        System.out.println(ok);\n    }\n}",
    "choices": [
      "条件成立後は以降の要素を処理しない",
      "全要素を必ず処理する",
      "peekは評価されない",
      "例外は無視される",
      "コンパイルエラーになる"
    ],
    "answerIndex": 0,
    "explanation": "anyMatchは短絡するため、成立後は以降の要素評価を行わない。",
    "id": 92
  },
  {
    "category": "Java Gold/Stream API/短絡",
    "difficulty": "中級",
    "question": "anyMatch の短絡特性に関する正しい説明はどれ？",
    "code": "import java.util.stream.*;\npublic class Main {\n    public static void main(String[] args) {\n        boolean ok = IntStream.range(0, 100)\n            .peek(i -> { if (i == 20) throw new RuntimeException(); })\n            .anyMatch(i -> i > 50);\n        System.out.println(ok);\n    }\n}",
    "choices": [
      "条件成立後は以降の要素を処理しない",
      "全要素を必ず処理する",
      "peekは評価されない",
      "例外は無視される",
      "コンパイルエラーになる"
    ],
    "answerIndex": 0,
    "explanation": "anyMatchは短絡するため、成立後は以降の要素評価を行わない。",
    "id": 93
  },
  {
    "category": "Java Gold/Stream API/短絡",
    "difficulty": "中級",
    "question": "anyMatch の短絡特性に関する正しい説明はどれ？",
    "code": "import java.util.stream.*;\npublic class Main {\n    public static void main(String[] args) {\n        boolean ok = IntStream.range(0, 100)\n            .peek(i -> { if (i == 30) throw new RuntimeException(); })\n            .anyMatch(i -> i > 50);\n        System.out.println(ok);\n    }\n}",
    "choices": [
      "条件成立後は以降の要素を処理しない",
      "全要素を必ず処理する",
      "peekは評価されない",
      "例外は無視される",
      "コンパイルエラーになる"
    ],
    "answerIndex": 0,
    "explanation": "anyMatchは短絡するため、成立後は以降の要素評価を行わない。",
    "id": 94
  },
  {
    "category": "Java Gold/Stream API/短絡",
    "difficulty": "中級",
    "question": "anyMatch の短絡特性に関する正しい説明はどれ？",
    "code": "import java.util.stream.*;\npublic class Main {\n    public static void main(String[] args) {\n        boolean ok = IntStream.range(0, 100)\n            .peek(i -> { if (i == 40) throw new RuntimeException(); })\n            .anyMatch(i -> i > 50);\n        System.out.println(ok);\n    }\n}",
    "choices": [
      "条件成立後は以降の要素を処理しない",
      "全要素を必ず処理する",
      "peekは評価されない",
      "例外は無視される",
      "コンパイルエラーになる"
    ],
    "answerIndex": 0,
    "explanation": "anyMatchは短絡するため、成立後は以降の要素評価を行わない。",
    "id": 95
  },
  {
    "category": "Java Gold/Stream API/短絡",
    "difficulty": "中級",
    "question": "anyMatch の短絡特性に関する正しい説明はどれ？",
    "code": "import java.util.stream.*;\npublic class Main {\n    public static void main(String[] args) {\n        boolean ok = IntStream.range(0, 100)\n            .peek(i -> { if (i == 50) throw new RuntimeException(); })\n            .anyMatch(i -> i > 50);\n        System.out.println(ok);\n    }\n}",
    "choices": [
      "条件成立後は以降の要素を処理しない",
      "全要素を必ず処理する",
      "peekは評価されない",
      "例外は無視される",
      "コンパイルエラーになる"
    ],
    "answerIndex": 0,
    "explanation": "anyMatchは短絡するため、成立後は以降の要素評価を行わない。",
    "id": 96
  },
  {
    "category": "Java Gold/Stream API/短絡",
    "difficulty": "中級",
    "question": "anyMatch の短絡特性に関する正しい説明はどれ？",
    "code": "import java.util.stream.*;\npublic class Main {\n    public static void main(String[] args) {\n        boolean ok = IntStream.range(0, 100)\n            .peek(i -> { if (i == 60) throw new RuntimeException(); })\n            .anyMatch(i -> i > 50);\n        System.out.println(ok);\n    }\n}",
    "choices": [
      "条件成立後は以降の要素を処理しない",
      "全要素を必ず処理する",
      "peekは評価されない",
      "例外は無視される",
      "コンパイルエラーになる"
    ],
    "answerIndex": 0,
    "explanation": "anyMatchは短絡するため、成立後は以降の要素評価を行わない。",
    "id": 97
  },
  {
    "category": "Java Gold/Stream API/短絡",
    "difficulty": "中級",
    "question": "anyMatch の短絡特性に関する正しい説明はどれ？",
    "code": "import java.util.stream.*;\npublic class Main {\n    public static void main(String[] args) {\n        boolean ok = IntStream.range(0, 100)\n            .peek(i -> { if (i == 70) throw new RuntimeException(); })\n            .anyMatch(i -> i > 50);\n        System.out.println(ok);\n    }\n}",
    "choices": [
      "条件成立後は以降の要素を処理しない",
      "全要素を必ず処理する",
      "peekは評価されない",
      "例外は無視される",
      "コンパイルエラーになる"
    ],
    "answerIndex": 0,
    "explanation": "anyMatchは短絡するため、成立後は以降の要素評価を行わない。",
    "id": 98
  },
  {
    "category": "Java Gold/Stream API/短絡",
    "difficulty": "中級",
    "question": "anyMatch の短絡特性に関する正しい説明はどれ？",
    "code": "import java.util.stream.*;\npublic class Main {\n    public static void main(String[] args) {\n        boolean ok = IntStream.range(0, 100)\n            .peek(i -> { if (i == 80) throw new RuntimeException(); })\n            .anyMatch(i -> i > 50);\n        System.out.println(ok);\n    }\n}",
    "choices": [
      "条件成立後は以降の要素を処理しない",
      "全要素を必ず処理する",
      "peekは評価されない",
      "例外は無視される",
      "コンパイルエラーになる"
    ],
    "answerIndex": 0,
    "explanation": "anyMatchは短絡するため、成立後は以降の要素評価を行わない。",
    "id": 99
  },
  {
    "category": "Java Gold/Stream API/短絡",
    "difficulty": "中級",
    "question": "anyMatch の短絡特性に関する正しい説明はどれ？",
    "code": "import java.util.stream.*;\npublic class Main {\n    public static void main(String[] args) {\n        boolean ok = IntStream.range(0, 100)\n            .peek(i -> { if (i == 90) throw new RuntimeException(); })\n            .anyMatch(i -> i > 50);\n        System.out.println(ok);\n    }\n}",
    "choices": [
      "条件成立後は以降の要素を処理しない",
      "全要素を必ず処理する",
      "peekは評価されない",
      "例外は無視される",
      "コンパイルエラーになる"
    ],
    "answerIndex": 0,
    "explanation": "anyMatchは短絡するため、成立後は以降の要素評価を行わない。",
    "id": 100
  },
  {
    "category": "Java Gold/並行処理/仮想スレッド",
    "difficulty": "上級",
    "question": "仮想スレッド（Loom）の正しい説明はどれ？",
    "code": "// JDK 21 Loom (仮想スレッド) の例（概念問題）\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Thread t = Thread.ofVirtual().start(() -> System.out.print(\"V\"));\n        t.join();\n    }\n}",
    "choices": [
      "ユーザーモードスレッドでありスレッド生成コストが軽量",
      "従来のプラットフォームスレッドより常に高速ではないが大量生成に向く",
      "同期I/Oブロッキングとの相性が悪い",
      "ForkJoinPoolを利用できない",
      "スケジューリングはアプリ側で実装する必要がある"
    ],
    "answerIndex": 1,
    "explanation": "仮想スレッドは軽量で大量生成に適し、ランタイムがスケジューリングを行う。",
    "id": 101
  },
  {
    "category": "Java Gold/並行処理/仮想スレッド",
    "difficulty": "上級",
    "question": "仮想スレッド（Loom）の正しい説明はどれ？",
    "code": "// JDK 21 Loom (仮想スレッド) の例（概念問題）\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Thread t = Thread.ofVirtual().start(() -> System.out.print(\"V\"));\n        t.join();\n    }\n}",
    "choices": [
      "ユーザーモードスレッドでありスレッド生成コストが軽量",
      "従来のプラットフォームスレッドより常に高速ではないが大量生成に向く",
      "同期I/Oブロッキングとの相性が悪い",
      "ForkJoinPoolを利用できない",
      "スケジューリングはアプリ側で実装する必要がある"
    ],
    "answerIndex": 1,
    "explanation": "仮想スレッドは軽量で大量生成に適し、ランタイムがスケジューリングを行う。",
    "id": 102
  },
  {
    "category": "Java Gold/並行処理/仮想スレッド",
    "difficulty": "上級",
    "question": "仮想スレッド（Loom）の正しい説明はどれ？",
    "code": "// JDK 21 Loom (仮想スレッド) の例（概念問題）\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Thread t = Thread.ofVirtual().start(() -> System.out.print(\"V\"));\n        t.join();\n    }\n}",
    "choices": [
      "ユーザーモードスレッドでありスレッド生成コストが軽量",
      "従来のプラットフォームスレッドより常に高速ではないが大量生成に向く",
      "同期I/Oブロッキングとの相性が悪い",
      "ForkJoinPoolを利用できない",
      "スケジューリングはアプリ側で実装する必要がある"
    ],
    "answerIndex": 1,
    "explanation": "仮想スレッドは軽量で大量生成に適し、ランタイムがスケジューリングを行う。",
    "id": 103
  },
  {
    "category": "Java Gold/並行処理/仮想スレッド",
    "difficulty": "上級",
    "question": "仮想スレッド（Loom）の正しい説明はどれ？",
    "code": "// JDK 21 Loom (仮想スレッド) の例（概念問題）\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Thread t = Thread.ofVirtual().start(() -> System.out.print(\"V\"));\n        t.join();\n    }\n}",
    "choices": [
      "ユーザーモードスレッドでありスレッド生成コストが軽量",
      "従来のプラットフォームスレッドより常に高速ではないが大量生成に向く",
      "同期I/Oブロッキングとの相性が悪い",
      "ForkJoinPoolを利用できない",
      "スケジューリングはアプリ側で実装する必要がある"
    ],
    "answerIndex": 1,
    "explanation": "仮想スレッドは軽量で大量生成に適し、ランタイムがスケジューリングを行う。",
    "id": 104
  },
  {
    "category": "Java Gold/並行処理/仮想スレッド",
    "difficulty": "上級",
    "question": "仮想スレッド（Loom）の正しい説明はどれ？",
    "code": "// JDK 21 Loom (仮想スレッド) の例（概念問題）\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Thread t = Thread.ofVirtual().start(() -> System.out.print(\"V\"));\n        t.join();\n    }\n}",
    "choices": [
      "ユーザーモードスレッドでありスレッド生成コストが軽量",
      "従来のプラットフォームスレッドより常に高速ではないが大量生成に向く",
      "同期I/Oブロッキングとの相性が悪い",
      "ForkJoinPoolを利用できない",
      "スケジューリングはアプリ側で実装する必要がある"
    ],
    "answerIndex": 1,
    "explanation": "仮想スレッドは軽量で大量生成に適し、ランタイムがスケジューリングを行う。",
    "id": 105
  },
  {
    "category": "Java Gold/並行処理/仮想スレッド",
    "difficulty": "上級",
    "question": "仮想スレッド（Loom）の正しい説明はどれ？",
    "code": "// JDK 21 Loom (仮想スレッド) の例（概念問題）\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Thread t = Thread.ofVirtual().start(() -> System.out.print(\"V\"));\n        t.join();\n    }\n}",
    "choices": [
      "ユーザーモードスレッドでありスレッド生成コストが軽量",
      "従来のプラットフォームスレッドより常に高速ではないが大量生成に向く",
      "同期I/Oブロッキングとの相性が悪い",
      "ForkJoinPoolを利用できない",
      "スケジューリングはアプリ側で実装する必要がある"
    ],
    "answerIndex": 1,
    "explanation": "仮想スレッドは軽量で大量生成に適し、ランタイムがスケジューリングを行う。",
    "id": 106
  },
  {
    "category": "Java Gold/並行処理/仮想スレッド",
    "difficulty": "上級",
    "question": "仮想スレッド（Loom）の正しい説明はどれ？",
    "code": "// JDK 21 Loom (仮想スレッド) の例（概念問題）\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Thread t = Thread.ofVirtual().start(() -> System.out.print(\"V\"));\n        t.join();\n    }\n}",
    "choices": [
      "ユーザーモードスレッドでありスレッド生成コストが軽量",
      "従来のプラットフォームスレッドより常に高速ではないが大量生成に向く",
      "同期I/Oブロッキングとの相性が悪い",
      "ForkJoinPoolを利用できない",
      "スケジューリングはアプリ側で実装する必要がある"
    ],
    "answerIndex": 1,
    "explanation": "仮想スレッドは軽量で大量生成に適し、ランタイムがスケジューリングを行う。",
    "id": 107
  },
  {
    "category": "Java Gold/並行処理/仮想スレッド",
    "difficulty": "上級",
    "question": "仮想スレッド（Loom）の正しい説明はどれ？",
    "code": "// JDK 21 Loom (仮想スレッド) の例（概念問題）\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Thread t = Thread.ofVirtual().start(() -> System.out.print(\"V\"));\n        t.join();\n    }\n}",
    "choices": [
      "ユーザーモードスレッドでありスレッド生成コストが軽量",
      "従来のプラットフォームスレッドより常に高速ではないが大量生成に向く",
      "同期I/Oブロッキングとの相性が悪い",
      "ForkJoinPoolを利用できない",
      "スケジューリングはアプリ側で実装する必要がある"
    ],
    "answerIndex": 1,
    "explanation": "仮想スレッドは軽量で大量生成に適し、ランタイムがスケジューリングを行う。",
    "id": 108
  },
  {
    "category": "Java Gold/並行処理/仮想スレッド",
    "difficulty": "上級",
    "question": "仮想スレッド（Loom）の正しい説明はどれ？",
    "code": "// JDK 21 Loom (仮想スレッド) の例（概念問題）\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Thread t = Thread.ofVirtual().start(() -> System.out.print(\"V\"));\n        t.join();\n    }\n}",
    "choices": [
      "ユーザーモードスレッドでありスレッド生成コストが軽量",
      "従来のプラットフォームスレッドより常に高速ではないが大量生成に向く",
      "同期I/Oブロッキングとの相性が悪い",
      "ForkJoinPoolを利用できない",
      "スケジューリングはアプリ側で実装する必要がある"
    ],
    "answerIndex": 1,
    "explanation": "仮想スレッドは軽量で大量生成に適し、ランタイムがスケジューリングを行う。",
    "id": 109
  },
  {
    "category": "Java Gold/並行処理/仮想スレッド",
    "difficulty": "上級",
    "question": "仮想スレッド（Loom）の正しい説明はどれ？",
    "code": "// JDK 21 Loom (仮想スレッド) の例（概念問題）\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Thread t = Thread.ofVirtual().start(() -> System.out.print(\"V\"));\n        t.join();\n    }\n}",
    "choices": [
      "ユーザーモードスレッドでありスレッド生成コストが軽量",
      "従来のプラットフォームスレッドより常に高速ではないが大量生成に向く",
      "同期I/Oブロッキングとの相性が悪い",
      "ForkJoinPoolを利用できない",
      "スケジューリングはアプリ側で実装する必要がある"
    ],
    "answerIndex": 1,
    "explanation": "仮想スレッドは軽量で大量生成に適し、ランタイムがスケジューリングを行う。",
    "id": 110
  },
  {
    "category": "Java Gold/並行処理/仮想スレッド",
    "difficulty": "上級",
    "question": "仮想スレッド（Loom）の正しい説明はどれ？",
    "code": "// JDK 21 Loom (仮想スレッド) の例（概念問題）\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Thread t = Thread.ofVirtual().start(() -> System.out.print(\"V\"));\n        t.join();\n    }\n}",
    "choices": [
      "ユーザーモードスレッドでありスレッド生成コストが軽量",
      "従来のプラットフォームスレッドより常に高速ではないが大量生成に向く",
      "同期I/Oブロッキングとの相性が悪い",
      "ForkJoinPoolを利用できない",
      "スケジューリングはアプリ側で実装する必要がある"
    ],
    "answerIndex": 1,
    "explanation": "仮想スレッドは軽量で大量生成に適し、ランタイムがスケジューリングを行う。",
    "id": 111
  },
  {
    "category": "Java Gold/並行処理/仮想スレッド",
    "difficulty": "上級",
    "question": "仮想スレッド（Loom）の正しい説明はどれ？",
    "code": "// JDK 21 Loom (仮想スレッド) の例（概念問題）\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Thread t = Thread.ofVirtual().start(() -> System.out.print(\"V\"));\n        t.join();\n    }\n}",
    "choices": [
      "ユーザーモードスレッドでありスレッド生成コストが軽量",
      "従来のプラットフォームスレッドより常に高速ではないが大量生成に向く",
      "同期I/Oブロッキングとの相性が悪い",
      "ForkJoinPoolを利用できない",
      "スケジューリングはアプリ側で実装する必要がある"
    ],
    "answerIndex": 1,
    "explanation": "仮想スレッドは軽量で大量生成に適し、ランタイムがスケジューリングを行う。",
    "id": 112
  },
  {
    "category": "Java Gold/並行処理/仮想スレッド",
    "difficulty": "上級",
    "question": "仮想スレッド（Loom）の正しい説明はどれ？",
    "code": "// JDK 21 Loom (仮想スレッド) の例（概念問題）\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Thread t = Thread.ofVirtual().start(() -> System.out.print(\"V\"));\n        t.join();\n    }\n}",
    "choices": [
      "ユーザーモードスレッドでありスレッド生成コストが軽量",
      "従来のプラットフォームスレッドより常に高速ではないが大量生成に向く",
      "同期I/Oブロッキングとの相性が悪い",
      "ForkJoinPoolを利用できない",
      "スケジューリングはアプリ側で実装する必要がある"
    ],
    "answerIndex": 1,
    "explanation": "仮想スレッドは軽量で大量生成に適し、ランタイムがスケジューリングを行う。",
    "id": 113
  },
  {
    "category": "Java Gold/並行処理/仮想スレッド",
    "difficulty": "上級",
    "question": "仮想スレッド（Loom）の正しい説明はどれ？",
    "code": "// JDK 21 Loom (仮想スレッド) の例（概念問題）\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Thread t = Thread.ofVirtual().start(() -> System.out.print(\"V\"));\n        t.join();\n    }\n}",
    "choices": [
      "ユーザーモードスレッドでありスレッド生成コストが軽量",
      "従来のプラットフォームスレッドより常に高速ではないが大量生成に向く",
      "同期I/Oブロッキングとの相性が悪い",
      "ForkJoinPoolを利用できない",
      "スケジューリングはアプリ側で実装する必要がある"
    ],
    "answerIndex": 1,
    "explanation": "仮想スレッドは軽量で大量生成に適し、ランタイムがスケジューリングを行う。",
    "id": 114
  },
  {
    "category": "Java Gold/並行処理/仮想スレッド",
    "difficulty": "上級",
    "question": "仮想スレッド（Loom）の正しい説明はどれ？",
    "code": "// JDK 21 Loom (仮想スレッド) の例（概念問題）\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Thread t = Thread.ofVirtual().start(() -> System.out.print(\"V\"));\n        t.join();\n    }\n}",
    "choices": [
      "ユーザーモードスレッドでありスレッド生成コストが軽量",
      "従来のプラットフォームスレッドより常に高速ではないが大量生成に向く",
      "同期I/Oブロッキングとの相性が悪い",
      "ForkJoinPoolを利用できない",
      "スケジューリングはアプリ側で実装する必要がある"
    ],
    "answerIndex": 1,
    "explanation": "仮想スレッドは軽量で大量生成に適し、ランタイムがスケジューリングを行う。",
    "id": 115
  },
  {
    "category": "Java Gold/並行処理/仮想スレッド",
    "difficulty": "上級",
    "question": "仮想スレッド（Loom）の正しい説明はどれ？",
    "code": "// JDK 21 Loom (仮想スレッド) の例（概念問題）\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Thread t = Thread.ofVirtual().start(() -> System.out.print(\"V\"));\n        t.join();\n    }\n}",
    "choices": [
      "ユーザーモードスレッドでありスレッド生成コストが軽量",
      "従来のプラットフォームスレッドより常に高速ではないが大量生成に向く",
      "同期I/Oブロッキングとの相性が悪い",
      "ForkJoinPoolを利用できない",
      "スケジューリングはアプリ側で実装する必要がある"
    ],
    "answerIndex": 1,
    "explanation": "仮想スレッドは軽量で大量生成に適し、ランタイムがスケジューリングを行う。",
    "id": 116
  },
  {
    "category": "Java Gold/並行処理/仮想スレッド",
    "difficulty": "上級",
    "question": "仮想スレッド（Loom）の正しい説明はどれ？",
    "code": "// JDK 21 Loom (仮想スレッド) の例（概念問題）\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Thread t = Thread.ofVirtual().start(() -> System.out.print(\"V\"));\n        t.join();\n    }\n}",
    "choices": [
      "ユーザーモードスレッドでありスレッド生成コストが軽量",
      "従来のプラットフォームスレッドより常に高速ではないが大量生成に向く",
      "同期I/Oブロッキングとの相性が悪い",
      "ForkJoinPoolを利用できない",
      "スケジューリングはアプリ側で実装する必要がある"
    ],
    "answerIndex": 1,
    "explanation": "仮想スレッドは軽量で大量生成に適し、ランタイムがスケジューリングを行う。",
    "id": 117
  },
  {
    "category": "Java Gold/並行処理/仮想スレッド",
    "difficulty": "上級",
    "question": "仮想スレッド（Loom）の正しい説明はどれ？",
    "code": "// JDK 21 Loom (仮想スレッド) の例（概念問題）\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Thread t = Thread.ofVirtual().start(() -> System.out.print(\"V\"));\n        t.join();\n    }\n}",
    "choices": [
      "ユーザーモードスレッドでありスレッド生成コストが軽量",
      "従来のプラットフォームスレッドより常に高速ではないが大量生成に向く",
      "同期I/Oブロッキングとの相性が悪い",
      "ForkJoinPoolを利用できない",
      "スケジューリングはアプリ側で実装する必要がある"
    ],
    "answerIndex": 1,
    "explanation": "仮想スレッドは軽量で大量生成に適し、ランタイムがスケジューリングを行う。",
    "id": 118
  },
  {
    "category": "Java Gold/並行処理/仮想スレッド",
    "difficulty": "上級",
    "question": "仮想スレッド（Loom）の正しい説明はどれ？",
    "code": "// JDK 21 Loom (仮想スレッド) の例（概念問題）\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Thread t = Thread.ofVirtual().start(() -> System.out.print(\"V\"));\n        t.join();\n    }\n}",
    "choices": [
      "ユーザーモードスレッドでありスレッド生成コストが軽量",
      "従来のプラットフォームスレッドより常に高速ではないが大量生成に向く",
      "同期I/Oブロッキングとの相性が悪い",
      "ForkJoinPoolを利用できない",
      "スケジューリングはアプリ側で実装する必要がある"
    ],
    "answerIndex": 1,
    "explanation": "仮想スレッドは軽量で大量生成に適し、ランタイムがスケジューリングを行う。",
    "id": 119
  },
  {
    "category": "Java Gold/並行処理/仮想スレッド",
    "difficulty": "上級",
    "question": "仮想スレッド（Loom）の正しい説明はどれ？",
    "code": "// JDK 21 Loom (仮想スレッド) の例（概念問題）\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Thread t = Thread.ofVirtual().start(() -> System.out.print(\"V\"));\n        t.join();\n    }\n}",
    "choices": [
      "ユーザーモードスレッドでありスレッド生成コストが軽量",
      "従来のプラットフォームスレッドより常に高速ではないが大量生成に向く",
      "同期I/Oブロッキングとの相性が悪い",
      "ForkJoinPoolを利用できない",
      "スケジューリングはアプリ側で実装する必要がある"
    ],
    "answerIndex": 1,
    "explanation": "仮想スレッドは軽量で大量生成に適し、ランタイムがスケジューリングを行う。",
    "id": 120
  },
  {
    "category": "Java Gold/並行処理/VarHandle",
    "difficulty": "上級",
    "question": "VarHandle の説明として正しいものはどれ？",
    "code": "import java.lang.invoke.*;\npublic class Main {\n    static class Box { volatile int v = 0; }\n    public static void main(String[] args) throws Throwable {\n        VarHandle VH = MethodHandles.lookup().findVarHandle(Box.class, \"v\", int.class);\n        Box b = new Box();\n        VH.getAndAdd(b, 3);\n        System.out.println(b.v);\n    }\n}",
    "choices": [
      "低レベルなメモリ操作（原子的更新等）にアクセスする公式API",
      "sun.misc.Unsafe の別名である",
      "volatile フィールドに使用できない",
      "参照のみで更新は不可",
      "Java 8 から存在する"
    ],
    "answerIndex": 0,
    "explanation": "VarHandleはJDK9で導入された低レベル並行APIで原子的更新などを提供する。",
    "id": 121
  },
  {
    "category": "Java Gold/並行処理/VarHandle",
    "difficulty": "上級",
    "question": "VarHandle の説明として正しいものはどれ？",
    "code": "import java.lang.invoke.*;\npublic class Main {\n    static class Box { volatile int v = 0; }\n    public static void main(String[] args) throws Throwable {\n        VarHandle VH = MethodHandles.lookup().findVarHandle(Box.class, \"v\", int.class);\n        Box b = new Box();\n        VH.getAndAdd(b, 3);\n        System.out.println(b.v);\n    }\n}",
    "choices": [
      "低レベルなメモリ操作（原子的更新等）にアクセスする公式API",
      "sun.misc.Unsafe の別名である",
      "volatile フィールドに使用できない",
      "参照のみで更新は不可",
      "Java 8 から存在する"
    ],
    "answerIndex": 0,
    "explanation": "VarHandleはJDK9で導入された低レベル並行APIで原子的更新などを提供する。",
    "id": 122
  },
  {
    "category": "Java Gold/並行処理/VarHandle",
    "difficulty": "上級",
    "question": "VarHandle の説明として正しいものはどれ？",
    "code": "import java.lang.invoke.*;\npublic class Main {\n    static class Box { volatile int v = 0; }\n    public static void main(String[] args) throws Throwable {\n        VarHandle VH = MethodHandles.lookup().findVarHandle(Box.class, \"v\", int.class);\n        Box b = new Box();\n        VH.getAndAdd(b, 3);\n        System.out.println(b.v);\n    }\n}",
    "choices": [
      "低レベルなメモリ操作（原子的更新等）にアクセスする公式API",
      "sun.misc.Unsafe の別名である",
      "volatile フィールドに使用できない",
      "参照のみで更新は不可",
      "Java 8 から存在する"
    ],
    "answerIndex": 0,
    "explanation": "VarHandleはJDK9で導入された低レベル並行APIで原子的更新などを提供する。",
    "id": 123
  },
  {
    "category": "Java Gold/並行処理/VarHandle",
    "difficulty": "上級",
    "question": "VarHandle の説明として正しいものはどれ？",
    "code": "import java.lang.invoke.*;\npublic class Main {\n    static class Box { volatile int v = 0; }\n    public static void main(String[] args) throws Throwable {\n        VarHandle VH = MethodHandles.lookup().findVarHandle(Box.class, \"v\", int.class);\n        Box b = new Box();\n        VH.getAndAdd(b, 3);\n        System.out.println(b.v);\n    }\n}",
    "choices": [
      "低レベルなメモリ操作（原子的更新等）にアクセスする公式API",
      "sun.misc.Unsafe の別名である",
      "volatile フィールドに使用できない",
      "参照のみで更新は不可",
      "Java 8 から存在する"
    ],
    "answerIndex": 0,
    "explanation": "VarHandleはJDK9で導入された低レベル並行APIで原子的更新などを提供する。",
    "id": 124
  },
  {
    "category": "Java Gold/並行処理/VarHandle",
    "difficulty": "上級",
    "question": "VarHandle の説明として正しいものはどれ？",
    "code": "import java.lang.invoke.*;\npublic class Main {\n    static class Box { volatile int v = 0; }\n    public static void main(String[] args) throws Throwable {\n        VarHandle VH = MethodHandles.lookup().findVarHandle(Box.class, \"v\", int.class);\n        Box b = new Box();\n        VH.getAndAdd(b, 3);\n        System.out.println(b.v);\n    }\n}",
    "choices": [
      "低レベルなメモリ操作（原子的更新等）にアクセスする公式API",
      "sun.misc.Unsafe の別名である",
      "volatile フィールドに使用できない",
      "参照のみで更新は不可",
      "Java 8 から存在する"
    ],
    "answerIndex": 0,
    "explanation": "VarHandleはJDK9で導入された低レベル並行APIで原子的更新などを提供する。",
    "id": 125
  },
  {
    "category": "Java Gold/並行処理/VarHandle",
    "difficulty": "上級",
    "question": "VarHandle の説明として正しいものはどれ？",
    "code": "import java.lang.invoke.*;\npublic class Main {\n    static class Box { volatile int v = 0; }\n    public static void main(String[] args) throws Throwable {\n        VarHandle VH = MethodHandles.lookup().findVarHandle(Box.class, \"v\", int.class);\n        Box b = new Box();\n        VH.getAndAdd(b, 3);\n        System.out.println(b.v);\n    }\n}",
    "choices": [
      "低レベルなメモリ操作（原子的更新等）にアクセスする公式API",
      "sun.misc.Unsafe の別名である",
      "volatile フィールドに使用できない",
      "参照のみで更新は不可",
      "Java 8 から存在する"
    ],
    "answerIndex": 0,
    "explanation": "VarHandleはJDK9で導入された低レベル並行APIで原子的更新などを提供する。",
    "id": 126
  },
  {
    "category": "Java Gold/並行処理/VarHandle",
    "difficulty": "上級",
    "question": "VarHandle の説明として正しいものはどれ？",
    "code": "import java.lang.invoke.*;\npublic class Main {\n    static class Box { volatile int v = 0; }\n    public static void main(String[] args) throws Throwable {\n        VarHandle VH = MethodHandles.lookup().findVarHandle(Box.class, \"v\", int.class);\n        Box b = new Box();\n        VH.getAndAdd(b, 3);\n        System.out.println(b.v);\n    }\n}",
    "choices": [
      "低レベルなメモリ操作（原子的更新等）にアクセスする公式API",
      "sun.misc.Unsafe の別名である",
      "volatile フィールドに使用できない",
      "参照のみで更新は不可",
      "Java 8 から存在する"
    ],
    "answerIndex": 0,
    "explanation": "VarHandleはJDK9で導入された低レベル並行APIで原子的更新などを提供する。",
    "id": 127
  },
  {
    "category": "Java Gold/並行処理/VarHandle",
    "difficulty": "上級",
    "question": "VarHandle の説明として正しいものはどれ？",
    "code": "import java.lang.invoke.*;\npublic class Main {\n    static class Box { volatile int v = 0; }\n    public static void main(String[] args) throws Throwable {\n        VarHandle VH = MethodHandles.lookup().findVarHandle(Box.class, \"v\", int.class);\n        Box b = new Box();\n        VH.getAndAdd(b, 3);\n        System.out.println(b.v);\n    }\n}",
    "choices": [
      "低レベルなメモリ操作（原子的更新等）にアクセスする公式API",
      "sun.misc.Unsafe の別名である",
      "volatile フィールドに使用できない",
      "参照のみで更新は不可",
      "Java 8 から存在する"
    ],
    "answerIndex": 0,
    "explanation": "VarHandleはJDK9で導入された低レベル並行APIで原子的更新などを提供する。",
    "id": 128
  },
  {
    "category": "Java Gold/並行処理/VarHandle",
    "difficulty": "上級",
    "question": "VarHandle の説明として正しいものはどれ？",
    "code": "import java.lang.invoke.*;\npublic class Main {\n    static class Box { volatile int v = 0; }\n    public static void main(String[] args) throws Throwable {\n        VarHandle VH = MethodHandles.lookup().findVarHandle(Box.class, \"v\", int.class);\n        Box b = new Box();\n        VH.getAndAdd(b, 3);\n        System.out.println(b.v);\n    }\n}",
    "choices": [
      "低レベルなメモリ操作（原子的更新等）にアクセスする公式API",
      "sun.misc.Unsafe の別名である",
      "volatile フィールドに使用できない",
      "参照のみで更新は不可",
      "Java 8 から存在する"
    ],
    "answerIndex": 0,
    "explanation": "VarHandleはJDK9で導入された低レベル並行APIで原子的更新などを提供する。",
    "id": 129
  },
  {
    "category": "Java Gold/並行処理/VarHandle",
    "difficulty": "上級",
    "question": "VarHandle の説明として正しいものはどれ？",
    "code": "import java.lang.invoke.*;\npublic class Main {\n    static class Box { volatile int v = 0; }\n    public static void main(String[] args) throws Throwable {\n        VarHandle VH = MethodHandles.lookup().findVarHandle(Box.class, \"v\", int.class);\n        Box b = new Box();\n        VH.getAndAdd(b, 3);\n        System.out.println(b.v);\n    }\n}",
    "choices": [
      "低レベルなメモリ操作（原子的更新等）にアクセスする公式API",
      "sun.misc.Unsafe の別名である",
      "volatile フィールドに使用できない",
      "参照のみで更新は不可",
      "Java 8 から存在する"
    ],
    "answerIndex": 0,
    "explanation": "VarHandleはJDK9で導入された低レベル並行APIで原子的更新などを提供する。",
    "id": 130
  },
  {
    "category": "Java Gold/並行処理/VarHandle",
    "difficulty": "上級",
    "question": "VarHandle の説明として正しいものはどれ？",
    "code": "import java.lang.invoke.*;\npublic class Main {\n    static class Box { volatile int v = 0; }\n    public static void main(String[] args) throws Throwable {\n        VarHandle VH = MethodHandles.lookup().findVarHandle(Box.class, \"v\", int.class);\n        Box b = new Box();\n        VH.getAndAdd(b, 3);\n        System.out.println(b.v);\n    }\n}",
    "choices": [
      "低レベルなメモリ操作（原子的更新等）にアクセスする公式API",
      "sun.misc.Unsafe の別名である",
      "volatile フィールドに使用できない",
      "参照のみで更新は不可",
      "Java 8 から存在する"
    ],
    "answerIndex": 0,
    "explanation": "VarHandleはJDK9で導入された低レベル並行APIで原子的更新などを提供する。",
    "id": 131
  },
  {
    "category": "Java Gold/並行処理/VarHandle",
    "difficulty": "上級",
    "question": "VarHandle の説明として正しいものはどれ？",
    "code": "import java.lang.invoke.*;\npublic class Main {\n    static class Box { volatile int v = 0; }\n    public static void main(String[] args) throws Throwable {\n        VarHandle VH = MethodHandles.lookup().findVarHandle(Box.class, \"v\", int.class);\n        Box b = new Box();\n        VH.getAndAdd(b, 3);\n        System.out.println(b.v);\n    }\n}",
    "choices": [
      "低レベルなメモリ操作（原子的更新等）にアクセスする公式API",
      "sun.misc.Unsafe の別名である",
      "volatile フィールドに使用できない",
      "参照のみで更新は不可",
      "Java 8 から存在する"
    ],
    "answerIndex": 0,
    "explanation": "VarHandleはJDK9で導入された低レベル並行APIで原子的更新などを提供する。",
    "id": 132
  },
  {
    "category": "Java Gold/並行処理/VarHandle",
    "difficulty": "上級",
    "question": "VarHandle の説明として正しいものはどれ？",
    "code": "import java.lang.invoke.*;\npublic class Main {\n    static class Box { volatile int v = 0; }\n    public static void main(String[] args) throws Throwable {\n        VarHandle VH = MethodHandles.lookup().findVarHandle(Box.class, \"v\", int.class);\n        Box b = new Box();\n        VH.getAndAdd(b, 3);\n        System.out.println(b.v);\n    }\n}",
    "choices": [
      "低レベルなメモリ操作（原子的更新等）にアクセスする公式API",
      "sun.misc.Unsafe の別名である",
      "volatile フィールドに使用できない",
      "参照のみで更新は不可",
      "Java 8 から存在する"
    ],
    "answerIndex": 0,
    "explanation": "VarHandleはJDK9で導入された低レベル並行APIで原子的更新などを提供する。",
    "id": 133
  },
  {
    "category": "Java Gold/並行処理/VarHandle",
    "difficulty": "上級",
    "question": "VarHandle の説明として正しいものはどれ？",
    "code": "import java.lang.invoke.*;\npublic class Main {\n    static class Box { volatile int v = 0; }\n    public static void main(String[] args) throws Throwable {\n        VarHandle VH = MethodHandles.lookup().findVarHandle(Box.class, \"v\", int.class);\n        Box b = new Box();\n        VH.getAndAdd(b, 3);\n        System.out.println(b.v);\n    }\n}",
    "choices": [
      "低レベルなメモリ操作（原子的更新等）にアクセスする公式API",
      "sun.misc.Unsafe の別名である",
      "volatile フィールドに使用できない",
      "参照のみで更新は不可",
      "Java 8 から存在する"
    ],
    "answerIndex": 0,
    "explanation": "VarHandleはJDK9で導入された低レベル並行APIで原子的更新などを提供する。",
    "id": 134
  },
  {
    "category": "Java Gold/並行処理/VarHandle",
    "difficulty": "上級",
    "question": "VarHandle の説明として正しいものはどれ？",
    "code": "import java.lang.invoke.*;\npublic class Main {\n    static class Box { volatile int v = 0; }\n    public static void main(String[] args) throws Throwable {\n        VarHandle VH = MethodHandles.lookup().findVarHandle(Box.class, \"v\", int.class);\n        Box b = new Box();\n        VH.getAndAdd(b, 3);\n        System.out.println(b.v);\n    }\n}",
    "choices": [
      "低レベルなメモリ操作（原子的更新等）にアクセスする公式API",
      "sun.misc.Unsafe の別名である",
      "volatile フィールドに使用できない",
      "参照のみで更新は不可",
      "Java 8 から存在する"
    ],
    "answerIndex": 0,
    "explanation": "VarHandleはJDK9で導入された低レベル並行APIで原子的更新などを提供する。",
    "id": 135
  },
  {
    "category": "Java Gold/並行処理/VarHandle",
    "difficulty": "上級",
    "question": "VarHandle の説明として正しいものはどれ？",
    "code": "import java.lang.invoke.*;\npublic class Main {\n    static class Box { volatile int v = 0; }\n    public static void main(String[] args) throws Throwable {\n        VarHandle VH = MethodHandles.lookup().findVarHandle(Box.class, \"v\", int.class);\n        Box b = new Box();\n        VH.getAndAdd(b, 3);\n        System.out.println(b.v);\n    }\n}",
    "choices": [
      "低レベルなメモリ操作（原子的更新等）にアクセスする公式API",
      "sun.misc.Unsafe の別名である",
      "volatile フィールドに使用できない",
      "参照のみで更新は不可",
      "Java 8 から存在する"
    ],
    "answerIndex": 0,
    "explanation": "VarHandleはJDK9で導入された低レベル並行APIで原子的更新などを提供する。",
    "id": 136
  },
  {
    "category": "Java Gold/並行処理/VarHandle",
    "difficulty": "上級",
    "question": "VarHandle の説明として正しいものはどれ？",
    "code": "import java.lang.invoke.*;\npublic class Main {\n    static class Box { volatile int v = 0; }\n    public static void main(String[] args) throws Throwable {\n        VarHandle VH = MethodHandles.lookup().findVarHandle(Box.class, \"v\", int.class);\n        Box b = new Box();\n        VH.getAndAdd(b, 3);\n        System.out.println(b.v);\n    }\n}",
    "choices": [
      "低レベルなメモリ操作（原子的更新等）にアクセスする公式API",
      "sun.misc.Unsafe の別名である",
      "volatile フィールドに使用できない",
      "参照のみで更新は不可",
      "Java 8 から存在する"
    ],
    "answerIndex": 0,
    "explanation": "VarHandleはJDK9で導入された低レベル並行APIで原子的更新などを提供する。",
    "id": 137
  },
  {
    "category": "Java Gold/並行処理/VarHandle",
    "difficulty": "上級",
    "question": "VarHandle の説明として正しいものはどれ？",
    "code": "import java.lang.invoke.*;\npublic class Main {\n    static class Box { volatile int v = 0; }\n    public static void main(String[] args) throws Throwable {\n        VarHandle VH = MethodHandles.lookup().findVarHandle(Box.class, \"v\", int.class);\n        Box b = new Box();\n        VH.getAndAdd(b, 3);\n        System.out.println(b.v);\n    }\n}",
    "choices": [
      "低レベルなメモリ操作（原子的更新等）にアクセスする公式API",
      "sun.misc.Unsafe の別名である",
      "volatile フィールドに使用できない",
      "参照のみで更新は不可",
      "Java 8 から存在する"
    ],
    "answerIndex": 0,
    "explanation": "VarHandleはJDK9で導入された低レベル並行APIで原子的更新などを提供する。",
    "id": 138
  },
  {
    "category": "Java Gold/並行処理/VarHandle",
    "difficulty": "上級",
    "question": "VarHandle の説明として正しいものはどれ？",
    "code": "import java.lang.invoke.*;\npublic class Main {\n    static class Box { volatile int v = 0; }\n    public static void main(String[] args) throws Throwable {\n        VarHandle VH = MethodHandles.lookup().findVarHandle(Box.class, \"v\", int.class);\n        Box b = new Box();\n        VH.getAndAdd(b, 3);\n        System.out.println(b.v);\n    }\n}",
    "choices": [
      "低レベルなメモリ操作（原子的更新等）にアクセスする公式API",
      "sun.misc.Unsafe の別名である",
      "volatile フィールドに使用できない",
      "参照のみで更新は不可",
      "Java 8 から存在する"
    ],
    "answerIndex": 0,
    "explanation": "VarHandleはJDK9で導入された低レベル並行APIで原子的更新などを提供する。",
    "id": 139
  },
  {
    "category": "Java Gold/並行処理/VarHandle",
    "difficulty": "上級",
    "question": "VarHandle の説明として正しいものはどれ？",
    "code": "import java.lang.invoke.*;\npublic class Main {\n    static class Box { volatile int v = 0; }\n    public static void main(String[] args) throws Throwable {\n        VarHandle VH = MethodHandles.lookup().findVarHandle(Box.class, \"v\", int.class);\n        Box b = new Box();\n        VH.getAndAdd(b, 3);\n        System.out.println(b.v);\n    }\n}",
    "choices": [
      "低レベルなメモリ操作（原子的更新等）にアクセスする公式API",
      "sun.misc.Unsafe の別名である",
      "volatile フィールドに使用できない",
      "参照のみで更新は不可",
      "Java 8 から存在する"
    ],
    "answerIndex": 0,
    "explanation": "VarHandleはJDK9で導入された低レベル並行APIで原子的更新などを提供する。",
    "id": 140
  }
]