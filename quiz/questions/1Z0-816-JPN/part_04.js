const Q_1Z0_816_JPN_02 = {
    prefix: "1Z0-816-JPN",
    part: "02",
    questions: [
        {
            id: "1",
            category: "ストリームAPI",
            difficulty: "中級",
            question:
                "次のプログラムをコンパイル、実行したときの結果として、正しいものを選びなさい。（1つ選択）\n<code> 1.  import java.util.Optional;\n 2.  public class Ex1 {\n 3.      public static void main(String[] args) {\n 4.          Optional&lt;String&gt; sample = Optional.of(null);\n 5.          System.out.println(sample);\n 6.      }\n 7.  }</code>",
            choices: [
                "「null」と表示される",
                "「empty」と表示される",
                "「Optional.empty」と表示される",
                "実行時に例外がスローされる",
                "コンパイルエラーが発生する",
            ],
            answerIndex: "",
            explanation: "",
        },
        {
            id: "2",
            category: "ストリームAPI",
            difficulty: "初級",
            question:
                "次のプログラムをコンパイル、実行したときの結果として、正しいものを選びなさい。（1つ選択）\n<code> 1.  import java.util.Optional;\n 2.  public class OfTest {\n 3.      public static void main(String[] args) {\n 4.          Optional&lt;String&gt; sample = Optional.ofNullable(null);\n 5.          System.out.println(sample.get());\n 6.      }\n 7.  }</code>",
            choices: [
                "「null」と表示される",
                "「Optional.empty」と表示される",
                "実行時に例外がスローされる",
                "コンパイルエラーが発生する",
            ],
            answerIndex: "",
            explanation: "",
        },
        {
            id: "3",
            category: "ストリームAPI",
            difficulty: "初級",
            question:
                '次のプログラムをコンパイル、実行したときの結果として、正しいものを選びなさい。（1つ選択）\n<code> 1.  import java.util.Optional;\n 2.  public class Sample {\n 3.      public static void main(String[] args) {\n 4.          Optional&lt;String&gt; sample = Optional.of("A");\n 5.          System.out.println(sample.orElse("B"));\n 6.      }\n 7.  }</code>',
            choices: [
                "「A」と表示される",
                "「B」と表示される",
                "「Optional.empty」と表示される",
                "コンパイルエラーが発生する",
                "実行時に例外がスローされる",
            ],
            answerIndex: "",
            explanation: "",
        },
        {
            id: "4",
            category: "ストリームAPI",
            difficulty: "中級",
            question:
                "Optionalクラスを利用している。Optionalのインスタンスが空であったときに任意の例外をスローするOptionalクラスのメソッドとして、正しいものを選びなさい。（1つ選択）",
            choices: [
                "getメソッド",
                "orElseGetメソッド",
                "orElseThrowメソッド",
                "getThrowメソッド",
            ],
            answerIndex: "",
            explanation: "",
        },
        {
            id: "5",
            category: "ストリームAPI",
            difficulty: "初級",
            question:
                "Optionalクラスを利用している。Optionalが何らかの結果を持っているとき、その値を取り出すと同時に処理するためのメソッドとして、正しいものを選びなさい。（1つ選択）",
            choices: [
                "isPresentメソッド",
                "ifPresentメソッド",
                "presentメソッド",
                "executeメソッド",
            ],
            answerIndex: "",
            explanation: "",
        },
        {
            id: "6",
            category: "ストリームAPI",
            difficulty: "中級",
            question:
                "OptionalクラスのifPresentOrElseメソッドに渡す引数の型の組み合わせとして、正しいものを選びなさい。（1つ選択）",
            choices: [
                "Consumer, Runnable",
                "Supplier, Runnable",
                "Consumer, Function",
                "Supplier, Function",
            ],
            answerIndex: "",
            explanation: "",
        },
        {
            id: "7",
            category: "ストリームAPI",
            difficulty: "中級",
            question:
                '次のプログラムをコンパイル、実行したときの結果として、正しいものを選びなさい。（1つ選択）\n<code> 1.  import java.util.Optional;\n 2.  public class Ex7 {\n 3.      public static void main(String[] args) {\n 4.          Optional&lt;String&gt; sample = Optional.of("abcde");\n 5.          Optional&lt;String&gt; result = sample.map(\n 6.              str -&gt; str.toUpperCase());\n 7.          System.out.println(sample.get());\n 8.          System.out.println(result.get());\n 9.      }\n10.  }</code>',
            choices: [
                "「abcde」「abcde」と表示される",
                "「abcde」「ABCDE」と表示される",
                "「ABCDE」「abcde」と表示される",
                "「ABCDE」「ABCDE」と表示される",
            ],
            answerIndex: "",
            explanation: "",
        },
        {
            id: "8",
            category: "ストリームAPI",
            difficulty: "中級",
            question:
                "次のプログラムをコンパイル、実行したときの結果として、正しいものを選びなさい。（1つ選択）\n<code> 1.  import java.util.Optional;\n 2.  public class Test2 {\n 3.      public static void main(String[] args) {\n 4.          Optional&lt;Integer&gt; a = Optional.of(100);\n 5.          Optional&lt;Integer&gt; b = a.map(price -&gt; calc(price, 3));\n 6.          System.out.println(b.get());\n 7.      }\n 8.      private static Optional&lt;Integer&gt; calc(int price, int qty) {\n 9.          if (qty &lt; 0) {\n10.              return Optional.empty();\n11.          }\n12.          return Optional.of(price * qty);\n13.      }\n14.  }</code>",
            choices: [
                "「300」と表示される",
                "「empty」と表示される",
                "コンパイルエラーが発生する",
                "実行時に例外がスローされる",
            ],
            answerIndex: "",
            explanation: "",
        },
        {
            id: "9",
            category: "ストリームAPI",
            difficulty: "初級",
            question: "次のコードのうち、正しく記述されているものを選びなさい。（1つ選択）",
            choices: [
                "<code>List.of(1, 2, 3).forEach(x -&gt; System.out.println(x));</code>",
                "<code>List.of(1, 2, 3).forEach.out.println(x);</code>",
                "<code>List.of(1, 2, 3).forEach(() -&gt; return 100);</code>",
                "<code>List.of(1, 2, 3).forEach((x) -&gt; return x * 100);</code>",
            ],
            answerIndex: "",
            explanation: "",
        },
        {
            id: "10",
            category: "ストリームAPI",
            difficulty: "初級",
            question: "ストリームを利用する理由として、適切でないものを選びなさい。（1つ選択）",
            choices: [
                "コレクションや配列の全要素を同じように変換するため",
                "コレクションや配列の要素の合計や平均といった統計を取るため",
                "コレクションや配列でfor文などの繰り返し構文を置き換えるため",
                "コレクションや配列の要素を何らかの条件でグルーピングするため",
                "コレクションや配列の要素から条件に合ったデータを検索するため",
            ],
            answerIndex: "",
            explanation: "",
        },
        {
            id: "11",
            category: "ストリームAPI",
            difficulty: "初級",
            question:
                "int型要素を扱う配列型変数「array」からストリームを作るコードとして、正しいものを選びなさい。（1つ選択）",
            choices: [
                "<code>Stream&lt;Integer&gt; stream = array.stream();</code>",
                "<code>Stream&lt;Integer&gt; stream = Arrays.stream(array);</code>",
                "<code>IntStream stream = Arrays.stream(array);</code>",
                "<code>IntStream stream = array.stream();</code>",
            ],
            answerIndex: "",
            explanation: "",
        },
        {
            id: "12",
            category: "ストリームAPI",
            difficulty: "中級",
            question: "ストリームの処理順に関する説明として、正しいものを選びなさい。（1つ選択）",
            choices: [
                "コレクションに追加した順で処理される",
                "コレクションが管理する順で処理される",
                "コレクションに追加した順とは逆順に処理される",
                "処理順は常に不定である",
            ],
            answerIndex: "",
            explanation: "",
        },
        {
            id: "13",
            category: "ストリームAPI",
            difficulty: "初級",
            question:
                "String型要素を扱うjava.util.List型変数「list」から並列ストリームを取得するコードとして、正しいものを選びなさい。（1つ選択）",
            choices: [
                "ParallelStream&lt;String&gt; stream = list.parallelStream();",
                "ParallelList&lt;String&gt; stream = list.getParallelStream();",
                "Stream&lt;String&gt; stream = list.getParallelStream();",
                "Stream&lt;String&gt; stream = list.parallelStream();",
            ],
            answerIndex: "",
            explanation: "",
        },
        {
            id: "14",
            category: "ストリームAPI",
            difficulty: "中級",
            question:
                "次のプログラムを実行して、【実行結果】に示した結果を得たい。/* insert code here */に入るコードとして正しいものを選びなさい。（1つ選択）\n<code> 1.  import java.util.Arrays;\n 2.  import java.util.List;\n 3.  public class Sample {\n 4.      public static void main(String[] args) {\n 5.          List&lt;Integer&gt; list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n 6.          list.stream()\n 7.              /* insert code here */\n 8.              .forEach(System.out::print);\n 9.      }\n10.  }\n\n【実行結果】\n678910</code>",
            choices: [
                "filter(n -&gt; n &lt; 5)",
                "filter(n -&gt; n &gt; 5)",
                "map(n -&gt; n &gt; 5)",
                "map(n -&gt; n &lt; 5)",
            ],
            answerIndex: "",
            explanation: "",
        },
        {
            id: "15",
            category: "ストリームAPI",
            difficulty: "上級",
            question:
                '次のプログラムをコンパイル、実行したときの結果として、正しいものを選びなさい。（1つ選択）\n<code> 1.  public class Value {\n 2.      private String data;\n 3.      public Value(String data) {\n 4.          this.data = data;\n 5.      }\n 6.      @Override\n 7.      public int hashCode() {\n 8.          return 100;\n 9.      }\n10.      @Override\n11.      public boolean equals(Object obj) {\n12.          return true;\n13.      }\n14.  }\n\n 1.  import java.util.Arrays;\n 2.  import java.util.List;\n 3.  public class Test {\n 4.      public static void main(String[] args) {\n 5.          List&lt;Value&gt; list = Arrays.asList(\n 6.              new Value("A"),\n 7.              new Value("B"),\n 8.              new Value("C"),\n 9.              new Value("A")\n10.          );\n11.          long size = list.stream().distinct().count();\n12.          System.out.println(size);\n13.      }\n14.  }</code>',
            choices: [
                "「1」と表示される",
                "「3」と表示される",
                "「4」と表示される",
                "コンパイルエラーが発生する",
                "実行時に例外がスローされる",
            ],
            answerIndex: "",
            explanation: "",
        },
        {
            id: "16",
            category: "ストリームAPI",
            difficulty: "中級",
            question:
                "AからZまでの文字から成るストリームを扱っている。このときの説明として、正しいものを選びなさい。（2つ選択）",
            choices: [
                "シングルスレッドでストリームを扱っている場合は、findAnyメソッドはランダムな要素を1つ戻す",
                "マルチスレッドでストリームを扱っている場合は、findAnyはランダムな要素を1つ戻す",
                "シングルスレッドでストリームを扱っている場合は、findFirstメソッドはストリーム・パイプラインで最初に処理した要素を1つ戻す",
                "マルチスレッドでストリームを扱っている場合は、findFirstメソッドはストリーム・パイプラインで最初に処理した要素を1つ戻す",
            ],
            answerIndex: "",
            explanation: "",
        },
        {
            id: "17",
            category: "ストリームAPI",
            difficulty: "中級",
            question:
                "次のプログラムの「/* insert code here */」に入るコードとして、正しいものを選びなさい。（1つ選択）\n<code> 1.  import java.util.Arrays;\n 2.  import java.util.List;\n 3.  public class Test {\n 4.      public static void main(String[] args) {\n 5.          List&lt;Integer&gt; list = Arrays.asList(5, 4, 3, 2, 1);\n 6.          list.stream()\n 7.              /* insert code here */\n 8.              .forEach(System.out::println);\n 9.      }\n10.  }</code>",
            choices: ["sort", "sorting", "sorted", "compare"],
            answerIndex: "",
            explanation: "",
        },
        {
            id: "18",
            category: "ストリームAPI",
            difficulty: "中級",
            question:
                "次のプログラムの「/* insert code here */」に入るコードとして、正しいものを選びなさい。（1つ選択）\n<code> 1.  import java.util.Arrays;\n 2.  import java.util.List;\n 3.  import java.util.stream.Stream;\n 4.  public class Test {\n 5.      public static void main(String[] args) {\n 6.          List&lt;Integer&gt; list = Arrays.asList(1, 2, 3, 4, 5);\n 7.          /* insert code here */\n 8.          list.stream().map(n -&gt; String.valueOf(n));\n 9.      }\n10.  }</code>",
            choices: [
                "Stream&lt;String&gt; result",
                "Stream&lt;Integer&gt; result",
                "List&lt;String&gt; result",
                "List&lt;Integer&gt; result",
            ],
            answerIndex: "",
            explanation: "",
        },
        {
            id: "19",
            category: "ストリームAPI",
            difficulty: "中級",
            question:
                "次のプログラムの「/* insert code here */」に入るコードとして、最も適切なものを選びなさい。（1つ選択）\n<code>List&lt;Integer&gt; list = Arrays.asList(1, 2, 3, 4, 5);\n/* insert code here */ result = list.stream().reduce(0, (a, b) -&gt; a + b);</code>",
            choices: ["int", "Optional&lt;Integer&gt;", "Stream&lt;Integer&gt;", "Integer"],
            answerIndex: "",
            explanation: "",
        },
        {
            id: "20",
            category: "ストリームAPI",
            difficulty: "中級",
            question:
                '次のプログラムをコンパイル、実行したときの結果として、正しいものを選びなさい。（1つ選択）\n<code> 1.  import java.util.Arrays;\n 2.  import java.util.List;\n 3.  import java.util.Optional;\n 4.  public class Main {\n 5.      public static void main(String[] args) {\n 6.          List&lt;String&gt; list = Arrays.asList("A", "D", "C");\n 7.          Optional&lt;String&gt; result = list.stream().max((a, b) -&gt; a.compareTo(b));\n 8.          result.ifPresent(System.out::println);\n 9.      }\n10.  }</code>',
            choices: [
                "「A」と表示される",
                "「C」と表示される",
                "「D」と表示される",
                "コンパイルエラーが発生する",
                "実行時に例外がスローされる",
            ],
            answerIndex: "",
            explanation: "",
        },
        {
            id: "21",
            category: "ストリームAPI",
            difficulty: "初級",
            question:
                "ストリームを扱う際に、途中経過を保持するオブジェクトを使いたい。このような処理に適したインタフェースまたはクラスを選びなさい。（1つ選択）",
            choices: [
                "java.util.stream.Collector",
                "java.util.stream.Stream",
                "java.util.stream.StreamSupport",
                "java.util.stream.Stream.Builder",
            ],
            answerIndex: "",
            explanation: "",
        },
        {
            id: "22",
            category: "ストリームAPI",
            difficulty: "中級",
            question:
                "java.util.stream.Collectorインタフェースに規定されているメソッドのうち、実際に行いたい処理を記述するためのものを選びなさい。（1つ選択）",
            choices: [
                "supplierメソッド",
                "accumulatorメソッド",
                "combinerメソッド",
                "finisherメソッド",
                "characteristicsメソッド",
            ],
            answerIndex: "",
            explanation: "",
        },
        {
            id: "23",
            category: "ストリームAPI",
            difficulty: "中級",
            question:
                "次のプログラムのように、リストの要素を条件によって絞り込み、新しいリストを作りたい。「/* insert code here */」に入るコードとして、正しいものを選びなさい。（1つ選択）\n<code> 1.  import java.util.List;\n 2.  import java.util.stream.Collectors;\n 3.  public class Sample {\n 4.      public static void main(String[] args) {\n 5.          List&lt;Integer&gt; list = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n 6.          List&lt;Integer&gt; result = list.stream()\n 7.              .filter(n -&gt; n % 2 == 0)\n 8.              /* insert code here */;\n 9.          result.forEach(System.out::println);\n10.      }\n11.  }</code>",
            choices: [
                "toList()",
                "collect(Collectors.toList())",
                "reduce(Collectors.toList())",
                "getList()",
            ],
            answerIndex: "",
            explanation: "",
        },
        {
            id: "24",
            category: "ストリームAPI",
            difficulty: "上級",
            question:
                '次のプログラムの「/* insert code here */」に入るコードとして、正しいものを選びなさい。（1つ選択）\n<code> 1.  public class Department {\n 2.      private String name;\n 3.      public Department(String name) {\n 4.          this.name = name;\n 5.      }\n 6.      public String getName() { return name; }\n 7.      @Override\n 8.      public int hashCode() { return name.hashCode(); }\n 9.      @Override\n10.      public boolean equals(Object obj) {\n11.          if (obj instanceof Department) {\n12.              Department other = (Department) obj;\n13.              return this.name.equals(other.name);\n14.          }\n15.          return false;\n16.      }\n17.  }\n\n 1.  import java.util.List;\n 2.  import java.util.Map;\n 3.  import java.util.stream.Collectors;\n 4.  public class Sample {\n 5.      public static void main(String[] args) {\n 6.          Department tokyo = new Department("Tokyo");\n 7.          Department osaka = new Department("Osaka");\n 8.          List&lt;Employee&gt; list = List.of(\n 9.              new Employee("Johnny", tokyo),\n10.              new Employee("Bond", osaka),\n11.              new Employee("Mickey", tokyo),\n12.              new Employee("Sara", osaka)\n13.          );\n14.          /* insert code here */ result = list.stream().collect(\n15.              Collectors.groupingBy(Employee::getDept)\n16.          );\n17.      }\n18.  }</code>',
            choices: [
                "Map&lt;Department, Employee&gt;",
                "Map&lt;List&lt;Department&gt;, List&lt;Employee&gt;&gt;",
                "Map&lt;Department, List&lt;Employee&gt;&gt;",
                "List&lt;Employee&gt;",
                "List&lt;Department&gt;",
            ],
            answerIndex: "",
            explanation: "",
        },
        {
            id: "25",
            category: "ストリームAPI",
            difficulty: "上級",
            question:
                'リスト内の書籍のタイトルごとの合計金額を算出するために、以下の「/* insert code here */」に入るコードとして正しいものを選びなさい。（1つ選択）\n<code> 1.  public class Book {\n 2.      private String title;\n 3.      private int price;\n 4.      public Book(String title, int price) {\n 5.          this.title = title;\n 6.          this.price = price;\n 7.      }\n 8.      public String getTitle() { return title; }\n 9.      public int getPrice() { return price; }\n10.  }\n\n 1.  import java.util.Arrays;\n 2.  import java.util.Map;\n 3.  import java.util.stream.Collectors;\n 4.  public class Sample {\n 5.      public static void main(String[] args) {\n 6.          Map&lt;String, Integer&gt; map = Arrays.asList(\n 7.              new Book("A", 1000),\n 8.              new Book("B", 2000),\n 9.              new Book("A", 500)\n10.          ).stream()\n11.           .collect(\n12.               /* insert code here */\n13.           );\n14.          map.forEach((k, v) -&gt; System.out.println(k + ":" + v));\n15.      }\n16.  }</code>',
            choices: [
                "reduce(Book::getPrice)",
                "reduce(b -&gt; b.getPrice())",
                "summingInt(b -&gt; b.getPrice())",
                "Collectors.groupingBy(Book::getTitle, Collectors.summingInt(Book::getPrice))",
            ],
            answerIndex: "",
            explanation: "",
        },
        {
            id: "26",
            category: "ストリームAPI",
            difficulty: "上級",
            question:
                '次のプログラムをコンパイル、実行したときの結果として、正しいものを選びなさい。（1つ選択）\n<code> 1.  import java.util.Arrays;\n 2.  import java.util.List;\n 3.  import java.util.Set;\n 4.  import java.util.stream.Collectors;\n 5.  import java.util.stream.Stream;\n 6.  public class Sample {\n 7.      public static void main(String[] args) {\n 8.          List&lt;String&gt; list = Arrays.asList("banana", "apple", "orange");\n 9.          Stream&lt;String&gt; stream = list.stream();\n10.          Set&lt;Boolean&gt; keys = stream.collect(\n11.              Collectors.partitioningBy(str -&gt; str.length() &gt; 5)\n12.          ).keySet();\n13.          keys.forEach(System.out::println);\n14.      }\n15.  }</code>',
            choices: [
                "「true」「false」と表示される",
                "「TRUE」「FALSE」と表示される",
                "「banana」「orange」と表示される",
                "コンパイルエラーが発生する",
                "実行時に例外がスローされる",
            ],
            answerIndex: "",
            explanation: "",
        },
        {
            id: "27",
            category: "ストリームAPI",
            difficulty: "上級",
            question:
                '次のプログラムをコンパイル、実行したときの結果として、正しいものを選びなさい。（1つ選択）\n<code> 1.  import java.util.Arrays;\n 2.  import java.util.List;\n 3.  import java.util.stream.Stream;\n 4.  public class Sample {\n 5.      public static void main(String[] args) {\n 6.          List&lt;String&gt; list = Arrays.asList("banana", "apple", "orange");\n 7.          Stream&lt;String&gt; stream = list.stream();\n 8.          stream.filter(str -&gt; str.length() &gt; 5)\n 9.              .peek(str -&gt; System.out.print(str + " "))\n10.              .map(str -&gt; str.toUpperCase())\n11.              .peek(str -&gt; System.out.print(str + " "))\n12.              .forEach(System.out::print);\n13.      }\n14.  }</code>',
            choices: [
                "「banana orange BANANA ORANGE BANANA ORANGE」と表示される",
                "「banana orange BANANA APPLE ORANGE BANANA APPLE ORANGE」と表示される",
                "「banana BANANA orange ORANGE」と表示される",
                "「banana BANANA BANANAorange ORANGE ORANGE」と表示される",
                "コンパイルエラーが発生する",
                "実行時に例外がスローされる",
            ],
            answerIndex: "",
            explanation: "",
        },
        {
            id: "28",
            category: "ストリームAPI",
            difficulty: "初級",
            question:
                "次のプログラムをコンパイル、実行したときの結果として、正しいものを選びなさい。（1つ選択）\n<code> 1.  import java.util.Arrays;\n 2.  import java.util.List;\n 3.  import java.util.stream.Stream;\n 4.  public class Sample {\n 5.      public static void main(String[] args) {\n 6.          List&lt;Integer&gt; list = Arrays.asList(1, 2, 3);\n 7.          Stream&lt;Integer&gt; stream = list.stream();\n 8.          System.out.println(stream.count());\n 9.          stream.forEach(System.out::println);\n10.      }\n11.  }</code>",
            choices: [
                "「3」「1」「2」「3」と表示される",
                "「2」「1」「2」「3」と表示される",
                "コンパイルエラーが発生する",
                "実行時に例外がスローされる",
            ],
            answerIndex: "",
            explanation: "",
        },
    ],
};
